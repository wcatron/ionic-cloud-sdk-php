<?php

namespace Ionic\Push;

use GuzzleHttp\Promise\Promise;
use Ionic\Client;
use Ionic\Helpers\Pagination;
use Ionic\Push\Models\Notification;
use Ionic\Push\Models\Targets;
use Ionic\Push\Models\Token;

/**
 * Class PushClient
 * @package Ionic\Push
 * @method Notification push(Notification $notification, Targets $targets, \DateTime $scheduled = false)
 * @method Token createToken(string $token, string $user_id)
 * @method Token getToken(string $token)
 */
class PushClient extends Client {
    function getDefaults($config = []) {
        return parent::getDefaults(
            array_replace_recursive(
                [
                    'route_parser' => [
                        'configs' => [
                            'version' => '2.0.0-beta.0',
                            'client'  => 'push'
                        ]
                    ]
                ], $config)
        );
    }
    
    function pushAsync(Notification $notification, Targets $targets, \DateTime $scheduled = false) {
        $args = array_merge([ "notification" => $notification->configs(),
                              "profile"      => $this->config['profile'] ], $targets->targets());
        if ($scheduled) {
            $args["scheduled"] = $scheduled->format('c');
        }
        $this->getCommand('createNotification', $args)->resolve();
    }
    
    /**
     * Note: Pass by reference requires this function be implemented fully vs called via __call()
     * @param Pagination $pagination
     * @param bool       $showInvalid Determines whether to include invalidated tokens
     * @param string     $user_id     Only display tokens associated with the User ID.
     * @return Token[] Array of tokens matching parameters.
     */
    function getTokens(Pagination &$pagination, $showInvalid = false, $user_id = null) {
        $results = $this->getTokensAsync($pagination, $showInvalid)->wait();
        return $results;
    }
    
    /**
     * @param Pagination $pagination
     * @param bool       $showInvalid Determines whether to include invalidated tokens
     * @param string     $user_id     Only display tokens associated with the User ID.
     * @return Promise
     */
    function getTokensAsync(Pagination &$pagination, $showInvalid = false, $user_id = null) {
        return $this->getCommand('getTokens', [
            'show_invalid' => $showInvalid,
            'user_id'      => $user_id,
            'page_size'    => $pagination->pageSize,
            'page'         => $pagination->page
        ])->resolve()->then(function ($results) use (&$pagination) {
            $pagination->currentSize = count($results);
            $pagination->currentPage++;
            return $results;
        });
    }
    
    /**
     * Saves a device token that was previously generated by a device platform.
     * @param string $token   Device Token
     * @param string $user_id (uuid) User ID. Associate the token with the User.
     * @return Promise
     */
    function createTokenAsync($token, $user_id) {
        return $this->getCommand('createToken', [ "token" => $token, "user_id" => $user_id ])->resolve();
    }
    
    /**
     * @param string $token_id Token ID
     * @return Promise
     */
    function getTokenAsync($token_id) {
        return $this->getCommand('getToken', ["token_id" => md5($token_id)])->resolve();
    }
}